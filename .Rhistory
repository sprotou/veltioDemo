train <- tmp$train
valid <- tmp$valid
valid <- as.matrix( valid )
xd <- preprocessx ( train [,- ycol ] ,k)
kout <- knnest ( train [ , ycol ] ,xd ,k)
predy <- predict(kout , valid [,- ycol ] ,TRUE)
realy <- valid [ , ycol ]
if (meanabs) return(mean(abs(predy - realy )))
list (predy = predy , realy = realy )
}
library ( regtools )
library(regtools)
library(regtools)
set.seed(9999)
xvalknn(mlb ,5 ,c(4 ,6) ,25 ,2/3)
library(regtools)
set.seed(9999)
xvalknn(mlb ,5 ,c(4 ,6) ,25 ,2/3)
#k-NN
preprocessx(x ,kmax, xval=FALSE)
library(regtools)
install.packages('regtools')
library(regtools)
set.seed(9999)
xvalknn(mlb ,5 ,c(4 ,6) ,25 ,2/3)
for (i2 in 1:10) {
ourResKnn = xvalknn(mlb ,5 ,c(4 ,6) ,25 ,2/3)
}
set.seed(9999)
ourResKnn = vector()
for (i2 in 1:10) {
ourResKnn = xvalknn(mlb ,5 ,c(4 ,6) ,25 ,2/3)
}
ourResKnn
set.seed(9999)
ourResKnn = vector()
for (i2 in 1:10) {
ourResKnn[i2] = xvalknn(mlb ,5 ,c(4 ,6) ,25 ,2/3)
}
ourResKnn
data(prgeng)
prgeng$age2 <- prgeng$ageË†2
data(prgeng)
prgeng$age2 <- prgeng$age^2
edu <- prgeng$educ
prgeng$ms <- as . integer(edu == 14)
prgeng$ms <- as.integer(edu == 14)
prgeng$phd <- as.integer(edu == 16)
prgeng$fem <- prgeng$sex - 1
tmp <- prgeng [ edu >= 13 ,]
pe <- tmp[ , c(1 ,12 ,9 ,13 ,14 ,15 ,8)]
pe <- as.matrix(pe)
lm(wageinc ~
age+age2+wkswrkd+ms+phd+fem + age*fem + age2*gem ,data=prgeng)
lm(wageinc ~
age+age2+wkswrkd+ms+phd+fem + age*fem + age2*fem ,data=prgeng)
wageModel = lm(wageinc ~
age+age2+wkswrkd+ms+phd+fem + age*fem + age2*fem ,data=prgeng)
prgeng$sex
prgeng$ms
wageModel(fem=1, ms=1)
wageModel = lm(wageinc ~
age+age2+wkswrkd+ms+phd+fem + age*fem + age2*fem ,data=prgeng)
wageModel(fem=1, ms=1)
wageModel(ms=1, age=32)
mean(abs(ourRes - ourResKnn))
wageModel = lm(wageinc ~
age+age2+wkswrkd+ms+phd+fem + age*fem + age2*fem ,data=prgeng)
wageModel
coeffs = coefficients(wageModel); coeffs
wageModel = lm(wageinc ~
age+age2+wkswrkd+ms+phd+fem + age:fem + age2:fem ,data=prgeng)
wageModel
coeffs = coefficients(wageModel); coeffs
ourPrediction = predict(object = wageModel,newdata = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1, phd = 1, fem = 1)))
cat("Predicted wage is: ",predicted_value)
ourPrediction = predict(object = wageModel,newdata = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1, phd = 1, fem = 1)))
cat("Predicted wage is: ", ourPrediction)
ourPrediction = predict(object = wageModel,newdata = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1, phd = 0, fem = 1)))
cat("Predicted wage is: ", ourPrediction)
ourPrediction = predict(object = wageModel,newdata = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1,  fem = 1)))
ourPrediction = predict(object = wageModel,newdata = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1, phd = 0.5, fem = 1)))
cat("Predicted wage is: ", ourPrediction)
ourPrediction = predict(object = wageModel,newdata = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1, phd = 0.3, fem = 1)))
cat("Predicted wage is: ", ourPrediction)
#phd = 0.3 is an assumption: I assumed that 30% of 32year old female MSc holders also have a PhD
ourPrediction
library(mfp)
install.package('mfp')
data(bodyfat)
install.package('mpf')
install.packages('mfp')
# Consider the bodyfat data mentioned in Section 1.2. Use lm() to form
# a prediction equation for density from the other variables (skipping the
#                                                             first three), and comment on whether use of indirect methods in this way
# seems feasible.
library(mfp)
data(bodyfat)
View(bodyfat)
newdata
bFatModel = lm(ourBodyFat ~
age + height + weight + wrist + abdomen ,data = bodyfat)
bFatModel = lm(ourBodyFat ~
age + height + weight + wrist + abdomen ,data = bodyfat)
bFatModel = lm(ourBo232dyFat ~
age + height + weight + wrist + abdomen ,data = bodyfat)
ourPrediction = predict(object = wageModel,newData = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1, phd = 0.3, fem = 1)))
#phd = 0.3 is an assumption: I assumed that 30% of 32year old female MSc holders also have a PhD
ourPrediction
ourPrediction = predict(object = wageModel,newdata = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1, phd = 0.3, fem = 1)))
#phd = 0.3 is an assumption: I assumed that 30% of 32year old female MSc holders also have a PhD
ourPrediction
bodyfat = bodyfat %>%
mutate(ourBodyFat)
bodyfat = bodyfat %>%
mutate(ourBodyFat = 0)
bFatModel = lm(ourBodyFat ~
age + height + weight + wrist + abdomen ,data = bodyfat)
bodyfat = bodyfat %>%
mutate(ourBodyFat = predict(object = bFatModel))
bodyfatTest = bodyfat %>%
do(bFatModel) %>%
predict()
bodyfatTest = bodyfat %>%
do(bFatModel) %>%
predict %>%
data_frame(prediction = .)
bodyfatTest = bodyfat %>%
do(bFatModel) %>%
predict %>%
data_frame(prediction = .))
bodyfatTest = bodyfat %>%
do(bFatModel) %>%
predict() %>%
data_frame(prediction = .)
bodyfatTest = bodyfat %>%
do(bFatModel) %>%
predict() %>%
data_frame(prediction = .) %>%
bind_cols(bodyfat)
bodyfatTest = bodyfat %>%
do(bFatModel) %>%
predict() %>%
data.frame(prediction = .) %>%
bind_cols(bodyfat)
bodyfatTest = bodyfat %>%
do(bFatModel) %>%
predict() %>%
as.data.frame(prediction = .) %>%
bind_cols(bodyfat)
bodyfatTest = bodyfat %>%
do(bFatModel) %>%
predict() %>%
as.data_frame(prediction = .) %>%
bind_cols(bodyfat)
for (ourRow in 1:nrow(bodyfat) ) {
predVec[i]= predict(model = bFatModel)
}
for (ourRow in 1:nrow(bodyfat) ) {
predVec[i]= predict(object = bFatModel)
}
predVec = vector()
for (ourRow in 1:nrow(bodyfat) ) {
predVec[i]= predict(object = bFatModel)
}
warnings()
for (ourRow in 1:nrow(bodyfat) ) {
predVec[i]= predict(object = bodyfat, model = bFatModel)
}
predVec[i]= predict(object = adasd, model = bFatModel)
predVec[i]= predict(object = predVec, model = bFatModel)
for (ourRow in 1:nrow(bodyfat) ) {
predVec[i]= predict(object = bodyfat[i,], model = bFatModel)
}
predVec[i]= predict(data = bodyfat[i,], model = bFatModel)
for (ourRow in 1:nrow(bodyfat) ) {
predVec[i]= predict(data = bodyfat[i,], model = bFatModel)
}
predVec = lapply(predict(model=bFatModel, data= bodyfat))
predVec = lapply(fun=predict(model=bFatModel, data= bodyfat))
predVec = lapply(FUN = predict(model=bFatModel, data= bodyfat))
predVec = lapply(predict, bFatModel, data = bodyfat)
predVec = lapply(FUN = predict, bFatModel, data = bodyfat)
predList = list()
predListaaaa = lapply(predList, function(x){predict(bFatModel, newdata = x )})
predListaaaa = lapply(bodyfat, function(x){predict(bFatModel, newdata = x )})
for (ourRow in 1:nrow(bodyfat) ) {
predList[[i]] = data.frame(bodyfat[i,])
}
predListaaaa = lapply(predList, function(x){predict(bFatModel, newdata = x )})
predList = list()
bodyfat[i,]
data.frame(bodyfat[i,])
View(predListaaaa)
for (ourRow in 1:nrow(bodyfat) ) {
predList[i] = data.frame(bodyfat[i,])
}
for (i in 1:nrow(bodyfat) ) {
predList[i] = data.frame(bodyfat[i,])
}
predList = list()
for (i in 1:nrow(bodyfat) ) {
predList[[i]] = data.frame(bodyfat[i,])
}
View(predList)
predListaaaa = lapply(predList, function(x){predict(bFatModel, newdata = x )})
View(predListaaaa)
for (i in 1:nrow(bodyfat) ) {
predList[i] = data.frame(bodyfat[i,])
}
View(predListaaaa)
predVec = vector()
for (i in 1:nrow(bodyfat) ) {
predVec[i] = data.frame(bodyfat[i,])
}
for (i in 1:nrow(bodyfat) ) {
predVec[i] = bodyfat[i,]
}
bodyfat[,1]
bodyfat[1,]
predVec[i] = bodyfat[3,]
bodyfat[3,]
View(predListaaaa)
View(predListaaaa)
bodyfat = bodyfat %>%
mutate(ourBodyFat = funs(predict(bFatModel)))
bodyfat = bodyfat %>%
mutate(ourBodyFat = predict(bFatModel))
bodyfat = bodyfat %>%
do(predict(object = ourBodyFat, model = bFatModel))
bodyfat = bodyfat %>%
do(predict(object = ourBodyfat, model = bFatModel))
bodyfat = bodyfat %>%
mutate(ourBodyFat = 0)
bodyfat = bodyfat %>%
do(predict(object = ourBodyfat, model = bFatModel))
bodyfat = bodyfat %>%
do(predict(object = ourBodyFat, model = bFatModel))
bodyfat = bodyfat %>%
do(predict(object = bodyfat$ourBodyFat, model = bFatModel))
tmp
temp1
temp1
temp1 = double
predict(object = temp1, model = bFatModel)
predict(object = temp1, model = bFatModel, data=bodyfat[1,])
temp1 = double
predict(object = temp1, model = bFatModel, data=bodyfat[1,])
bodyfat$age
bodyfat$age[1]
ourTest = predict(object = bFatModel,newdata = c(data.frame(age = bodyfat$age[1], age2 = bodyfat$age2[1],height= bodyfat$height[1],
weight = bodyfat$weight[1], wrist = bodyfat$wrist[1],abdomen = bodyfat$abdomen[1])))
bodyfat$height[1]
library(freqparcoord)
library(tidyverse)
library(regtools)
data(mlb)
# Consider the bodyfat data mentioned in Section 1.2. Use lm() to form
# a prediction equation for density from the other variables (skipping the
#                                                             first three), and comment on whether use of indirect methods in this way
# seems feasible.
library(mfp)
data(bodyfat)
bFatModel = lm(ourBodyFat ~
age + height + weight + wrist + abdomen ,data = bodyfat)
bodyfatTest = bodyfat %>%
map(.x = bodyfat$ourTest, .f = predict(bFatModel), age = bodyfat$age)
View(bodyfat)
View(bodyfatTest)
bodyfatTest = bodyfat %>%
map(.x = bodyfatTest, .f = predict(bFatModel), age = bodyfat$age)
bodyfatTest = bodyfat %>%
map(.x = bodyfatTest, .f = bFatModel, age = bodyfat$age)
bodyfatTest = bodyfat %>%
map(.x = bodyfatTest, .f = predict(bFatModel), age = bodyfat$age)
bodyfatTest = bodyfat %>%
map(.x = bodyfatTest, .f = predict(bFatModel))
bodyfat %>%
map(predict(bFatModel))
confint(wageModel, level = 0.95)
ourPrediction = predict(object = wageModel,newdata = c(data.frame(age = 32, age2 = 32^2, wkswrkd = 52,ms = 1, phd = 0.3, fem = 1)))
#phd = 0.3 is an assumption: I assumed that 30% of 32year old female MSc holders also have a PhD
ourPrediction
ourPrediction2 = predict(object = wageModel,newdata = c(data.frame(ms = 1, phd = 0.3)))
###Setup
```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(lubridate)
library(grid)
df <- read.csv('../input/fide_historical.csv')
library(tidyverse)
library(caret)
install.packages('tidyverse')
install.packages('caret')
install.packages('lubridate')
install.packages('DBI')
library(tidyverse)
library(caret)
.libPaths()
install.packages('yaml')
library(tidyverse)
library(caret)
.libPaths()
install.packages('Rccp')
data(iris)
x11 = <- runif(100, 5.0, 7.5)
x11 = runif(100, 5.0, 7.5)
x11 = runif(100, 5.0, 7.5)
x12 = runif(100, 10, 15)
x13 = runif(100, 20, 23)
cl1 = cbind(x)
cl1 = cbind.data.frame(x11, x12, x13)
x21 = runif(70, 5, 6)
x22 = runif(70, 30, 40)
cl2 = cbind.data.frame(x21, x22, x23)
x21 = runif(70, 5, 6)
x22 = runif(70, 30, 40)
x23 = runif(70, 4, 12)
cl2 = cbind.data.frame(x21, x22, x23)
x31 = runif(90, 5, 31)
x32 = runif(90, 30, 100)
x33 = runif(90, 7, 22)
cl3 = cbind.data.frame(x31, x32, x33)
myData = rbind(cl1,cl2,c3)
myData = rbind(cl1,cl2,cl3)
names.cl2 = names.cl1
names(cl2) = names(cl1)
names(cl3) = names(cl2)
myData = rbind(cl1, cl2, cl3)
View(myData)
names(myData) = c('x1','x2','x3')
library(caret)
library(tidyverse)
n_clusters = 1:6
nClusters = 1:6
forMap <- list()
for(i in seq_along(nClusters)){
forMap[[i]]<- kmeans(x = iris.standard,centers = n_clusters[i],nstart = 20)
}
for(i in seq_along(nClusters)){
forMap[[i]]<- kmeans(x = myData ,centers = nClusters[i],nstart = 20)
}
k = map_dbl(forMap,~ length(.x$size))
k = 6
pctExplained = map_dbl(myData,~.x$betweenss/.x$totss)
pctExplained = map_dbl(forMap, ~.x$betweenss/.x$totss)
elbow = tibble(k = k, pct_explained = pctExplained)
ggplot(elbow, mapping = aes(x=k, y=pctExplained)) + geom_line() + geom_point()
k = 1:6
pctExplained = map_dbl(forMap, ~.x$betweenss/.x$totss)
elbow = tibble(k = k, pct_explained = pctExplained)
ggplot(elbow, mapping = aes(x=k, y=pctExplained)) + geom_line() + geom_point()
myModel = forMap[[3]]
install.packages('cluster')
library(cluster)
mySil = silhouette(x = myModel$cluster, #cluster result
dist = daisy(x = as.matrix(myData),metric = "euclidean")) #distance matrix
plot(sil,col=1:3)
plot(mySil,col=1:3)
myModel$cluster
myData = cbind(as.factor(myModel$cluster))
View(myData)
myData = rbind(cl1, cl2, cl3)
myData = cbind(myData, as.factor(myModel$cluster))
View(myData)
labels = as.factor(myModel$cluster)
myData = cbind(myData, labels)
myData = rbind(cl1, cl2, cl3)
myData = cbind(myData, labels)
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=label)) + facet_wrap()
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=label)) + facet_wrap(~label)
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=label)) + facet_wrap(~.)
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=label)) + facet_wrap(label)
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=labels)) + facet_wrap(~labels)
View(myData)
names(myData) = c('x1','x2','x3')
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=labels)) + facet_wrap(~labels)
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=labels)) + facet_wrap(labels ~ .)
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=labels)) + facet_grid(labels ~ .)
ggplot(myData) + geom_point(aes(x=x1, y=x2, color=labels))
ggplot(myData) + geom_point(aes(x=x1, y=x2, z=x3, color=labels))
p1 = ggplot(myData) + geom_point(aes(x=x1, y=x2, color=labels)) #Careful! this is a 2D plot, but in reality we need it to be 3D to be accurate.
p1 + facet_grid(labels ~ .)
p1
p1 + facet_wrap(~labels)
p1 + facet_wrap(~myData$labels)
p1 = ggplot(myDataaes, aes(x=x1, y=x2, color=labels)) + geom_point() #Careful! this is a 2D plot, but in reality we need it to be 3D to be accurate.
p1
p1 = ggplot(myData, aes(x=x1, y=x2, color=labels)) + geom_point() #Careful! this is a 2D plot, but in reality we need it to be 3D to be accurate.
p1
p1 + facet_wrap(~labels)
p1 + facet_grid(labels~.)
names(myData)[4] = labels
names(myData)[4] = paste('labels')
p1 = ggplot(myData, aes(x=x1, y=x2, color=labels)) + geom_point() #Careful! this is a 2D plot, but in reality we need it to be 3D to be accurate.
p1
p1 + facet_wrap(~labels)
install.packages('plotly')
library(plotly)
p3D = plot_ly(myData, x = ~x1, y = ~x2, z = ~x3, color = ~labels)
p3D
library(tidyverse)
library(tidyverse)
jeansDataRaw = read_csv('RETAILDATA.csv')
#general EDA, correlations etc---------------------
cor(x = jeansDataRaw$`Shelf Spaces`, y= jeansDataRaw$`Items Sold`)
jeansData = jeansDataRaw %>%
mutate_all(funs(parse_number))
jeansData$`Day of the Week`
setwd('C:/Users/sprot/Documents/GitHub/453')
jeansDataNum = jeansData %>%
select_if(is.numeric) %>%
select(-Date, -`Day of the Week`)
library(tidyverse)
setwd('C:/Users/sprot/Documents/GitHub/453')
jeansDataRaw = read_csv('RETAILDATA.csv')
#general EDA, correlations etc---------------------
cor(x = jeansDataRaw$`Shelf Spaces`, y= jeansDataRaw$`Items Sold`)
jeansData = jeansDataRaw %>%
mutate_all(funs(parse_number))
jeansData$`Day of the Week`
jeansDataNum = jeansData %>%
select_if(is.numeric) %>%
select(-Date, -`Day of the Week`)
?cor
ourCor =  cor(jeansDataNum, use = 'everything') #any other way to handle NA? complete will drop the whole column even for 1 NA.
ourCor
corrplot::corrplot(ourCor)
jeansData$`Day of the Week` = jeansDataRaw$`Day of the Week`
jeansData$Date = jeansDataRaw$Date
forShelves = jeansData %>%
group_by(`Shelf Spaces`) %>%
summarise(meanProfitPerShelf = mean(`Profit/ Shelf`))
ggplot(forShelves) + geom_bar(mapping = aes(x=forShelves$`Shelf Spaces`, y = forShelves$meanProfitPerShelf), stat='identity')
jeansData = jeansData %>%
rename(profit_per_shelf = `Profit/ Shelf`,
shelf_spaces = `Shelf Spaces`)
jeansData$profit_per_shelf
jeansData %>%
filter(Markdown == 1) %>%
select(profit_per_shelf) %>%
lapply(mean, na.rm = T)
jeansData %>%
filter(Discount == 1) %>%
select(profit_per_shelf) %>%
lapply(mean, na.rm = T)
jeansData %>%
filter(Clearance == 1) %>%
select(profit_per_shelf) %>%
lapply(mean, na.rm = T)
jeansData %>%
filter(Clearance == 0 & Markdown == 0 & Discount == 0) %>%
select(profit_per_shelf) %>%
lapply(mean, na.rm = T)
ggplot(jeansData) + geom_point(mapping = aes(x = jeansData$`Average Price`, y = jeansData$profit_per_shelf))
jeansData %>%
filter(Type == 3) %>%
select(profit_per_shelf) %>%
lapply(mean, na.rm = T)
byDay = jeansData %>%
group_by(`Day of the Week`) %>%
summarise(meanProfit = mean(Profit))
write_csv(x = byDay, path = 'byday.csv')
byDay = jeansData %>%
group_by(`Day of the Week`) %>%
summarise(meanProfit = mean(Profit),
meanProfitPerShelf = mean(profit_per_shelf))
write_csv(x = byDay, path = 'byday.csv')
write_csv(x = byDay, path = 'byday.csv')
jeansData = jeansData %>%
rename(avg_price = `Average Price`)
jeansData %>%
filter(Type == 1) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales))
jeansData %>%
filter(Type == 2) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales))
jeansData %>%
filter(Type == 3) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales))
jeansData %>%
filter(Type == 3) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales)) + geom_smooth(method=lm)
jeansData %>%
filter(Type == 3) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales))
p3 =  jeansData %>%
filter(Type == 3) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales))
p3 + geom_line()
p3 + geom_line(method=lm)
p3 + geom_smooth(method=lm)
p3 =  jeansData %>%
filter(Type == 3) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales)) + geom_smooth(method=lm)
p3
p3 =  jeansData %>%
filter(Type == 3) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales)) + geom_smooth(aes(x = avg_price, y = Sales),method=lm)
p3
p1 =  jeansData %>%
filter(Type == 1) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales)) + geom_smooth(aes(x = avg_price, y = Sales),method=lm)
p2 =  jeansData %>%
filter(Type == 2) %>%
ggplot(.) + geom_point(aes(x = avg_price, y = Sales)) + geom_smooth(aes(x = avg_price, y = Sales),method=lm)
p1
p2
p3
p1
p2
p3
